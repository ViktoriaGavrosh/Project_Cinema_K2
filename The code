package cinema

class Theatre(val rows: Int, val seats: Int) {
    val hall = buildHall()
    var countBuyTicket = 0
    var currentIncome = 0
    val totalIncome = countTotalIncome()
    val isBigHall: Boolean = if ((hall.size - 1) * (hall[0].size - 1) <= 60) false else true
    var countRepeat = 0
    
    fun buildHall(): Array<Array<String>> {
        val arr = Array(rows + 1) { Array(seats + 1) { "S" }}
        arr[0][0] = " "

        for(i in arr[0].indices) {
            if (i != 0) arr[0][i] = i.toString()
         }
        for(i in arr.indices) {
            if (i!= 0) arr[i][0] = i.toString()
        }
        return(arr)
    } 
    
        fun countTotalIncome(): Int {
        val sumSeat = rows * seats
        if (sumSeat <= 60) {
            return (sumSeat * 10)
        } else {
            val res = rows / 2 * seats * 10 + Math.ceil(rows.toDouble() / 2) * seats * 8
            return res.toInt()
        }
    }

    //visualization of the seating position
    fun showSeats() {
        println("Cinema:")
        for(i in hall) {
            println(i.joinToString(" "))
        }
    }
    
    fun buyTicket() {                
        val rowChoose: Int
        val seatChoose: Int
        try {
            println("Enter a row number:")
            rowChoose = readLine()!!.toInt()
            println("Enter a seat number in that row:")
            seatChoose = readLine()!!.toInt()

            if(rowChoose !in 1..rows || seatChoose !in 1..seats) throw Exception()
            if(hall[rowChoose][seatChoose] == "B") throw IndexOutOfBoundsException()
            pay(rowChoose, seatChoose)
        } catch(e: IndexOutOfBoundsException) {
            println("That ticket has already been purchased!\n")
            buyTicket()
        } catch(e: Exception) {
            println("Wrong input!\n")
            countRepeat++
            if (countRepeat == 3) return
            buyTicket()
        }   
        countRepeat = 0
    }
    
    fun pay(rowChoose: Int, seatChoose: Int) {
        print("Ticket price:")
        if (isBigHall) {
            if (rowChoose <= (hall.size - 1) / 2) {
                    println ("\$10")
                    currentIncome += 10
                } else {
                    println ("\$8")
                    currentIncome += 8
            }
        } else {
            println("\$10")
            currentIncome += 10
        }
        hall[rowChoose][seatChoose] = "B"
        countBuyTicket++
    }
    
   fun printStatistics() {            
        println("Number of purchased tickets: $countBuyTicket")         
        println("Percentage: ${percent()}%")
        println("Current income: \$$currentIncome")
        println("Total income: \$$totalIncome")
    }
    
    fun percent(): String { 
    val result = countBuyTicket.toDouble() / (rows * seats) * 100
    return "%.2f".format(result)
    }
}

 fun main() {
    val(r, s) = readRowsSeatsString().split(" ")
    val theatre = Theatre(r.toInt(), s.toInt())
 
    goMenu(theatre)
}

fun readRowsSeatsString():String {
    var res: String
    try{
        println("Enter the number of rows:")
        val a = readLine()!!.toInt()
        println("Enter the number of seats in each row:")
        val b= readLine()!!.toInt()
        res = "$a $b"                   
    } catch(e: Exception) {
        println("Incorrect number. Please, try again")
        res = readRowsSeatsString()
    }
    return res
} 

fun goMenu(theatre: Theatre) {
    var n = false
    while(true){
        printMenu()
        println("")
        try {
            when(readLine()!!) {
                "1" -> theatre.showSeats()
                "2" -> theatre.buyTicket()
                "3" -> theatre.printStatistics()
                else -> n = true
            }
        } catch(e: Exception) {
            n = true
        }
        if(n) break
    }
}

fun printMenu() = println("\n1. Show the seats\n2. Buy a ticket\n3. Statistics\n0. Exit")

